classdef WeakClassifier < handle
    %WeakClassifier Summary of this class goes here
    %   Detailed explanation goes here

    properties
        dimension
        threshold
        direction
    end
    methods
        function error = train(obj, samples, labels, weights)
            
            %%% Calculating threshold on each feature.
            % 1. x position
            [t_x, e_x] = obj.getThreshold(samples(:, 1), labels, weights);
            % 2. y position
            [t_y, e_y] = obj.getThreshold(samples(:, 2), labels, weights);
            
            %%% Take the threshold of the feature with minimum error
            if e_x < e_y
                obj.dimension = 1;
                obj.threshold = t_x;
            else
                obj.dimension = 2;
                obj.threshold = t_y;
            end
            
            %%% Classify with weak classifier.
            weak_classified_labels = obj.test(samples);
            error = sum(weights(weak_classified_labels ~= labels));
        end
        function [threshold, error] = getThreshold(obj, feature, labels, weights)
            
            
            dataMatrix = [feature labels weights];
            dataMatrix = sortrows(dataMatrix, 1);
            

            total_positive_weights = sum(weights(labels == 1));
            total_negitive_weights = sum(weights(labels == -1));

            
            stepwise_positive_weights = cumsum(dataMatrix(:, 3) .* (dataMatrix(:, 2) == 1));
            stepwise_negitive_weights = cumsum(dataMatrix(:, 3) .* (dataMatrix(:, 2) == -1));
            
            % We need to find the decision boundary for the least error by
            % a weak classifier. For that we are calculating the error with
            % decision stump (axis) at each data point as a decision
            % boundary. We have to calculate the classification error in
            % both directions as there may be more number of samples of one
            % kind  on either side of the boundary.
            
            error_direction1 = stepwise_positive_weights + (total_negitive_weights - stepwise_negitive_weights);
            error_direction2 = stepwise_negitive_weights + (total_positive_weights - stepwise_positive_weights);
            
            e = min(error_direction1, error_direction2);
            index = find(e == min(e));
            
            obj.direction = error_direction1(index) < error_direction2(index);
            error = min(e);
            
            threshold = dataMatrix(index, 1);
        end
        function labels = test(obj, samples)
            if obj.direction
                labels = samples(:, obj.dimension) > obj.threshold;
            else
                labels = samples(:, obj.dimension) < obj.threshold;
            end
            labels(labels >0) = 1;
            labels(labels <=0)= -1; + 2 * labels;
        end
    end
end